package dev.shaaf.waver.steps;

import dev.shaaf.waver.model.Chapter;
import dev.shaaf.waver.model.RelationshipAnalysis;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.logging.Logger;

/**
 * Combines generated chapters into a complete tutorial.
 * <p>
 * This class is responsible for taking the individual chapters generated by the LLM
 * and combining them into a cohesive tutorial with an index page and proper formatting.
 * </p>
 */
public class CombineTutorial {
    // Get a logger instance for this class
    private static final Logger logger = Logger.getLogger(CombineTutorial.class.getName());
    /**
     * Builds the final tutorial by combining all chapters and creating an index.
     * <p>
     * This method:
     * <ul>
     *   <li>Creates the output directory if it doesn't exist</li>
     *   <li>Creates an index.md file with links to all chapters</li>
     *   <li>Writes each chapter to a separate file</li>
     * </ul>
     * </p>
     *
     * @param outputDir    the directory where the tutorial will be written
     * @param chapters     the content of each chapter
     * @param chapterOrder the ordered list of chapters
     * @param analysis     the relationship analysis between abstractions
     * @param intro        the introduction content for the tutorial
     * @throws IOException if an I/O error occurs while writing files
     */
    public static void build(
            Path outputDir,
            List<String> chapters,
            List<Chapter> chapterOrder,
            RelationshipAnalysis analysis, String intro
    ) throws IOException {

        Files.createDirectories(outputDir);


        // 2. Create index.md
        StringBuilder indexContent = new StringBuilder();
        indexContent.append(intro);
        indexContent.append("## Chapters\n\n");

        // 3. Write chapter files and add links to index
        for (int i = 0; i < chapters.size(); i++) {
            String chapterTitle = chapterOrder.get(i).name();
            String fileName = String.format("%02d-%s.md", i + 1, chapterTitle.replaceAll("\\s+", "-"));
            Path chapterPath = outputDir.resolve(fileName);
            Files.writeString(chapterPath, chapters.get(i));
            indexContent.append(String.format("* [%s](./%s)\n", chapterTitle, fileName));
        }

        Files.writeString(outputDir.resolve("index.md"), indexContent.toString());
        logger.info("âœ… Tutorial generated at: " + outputDir.toAbsolutePath());
    }
}
